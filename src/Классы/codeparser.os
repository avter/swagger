Перем ТекстМодуля;

Перем ПоискБлокиВызовов;
Перем ПоискИмяВызова;
Перем ПоискТипВызова;
Перем РазделительБлокаВызова;
Перем РазделительБлокаКомментария;
Перем ОчисткаБлокаКомментария;
Перем РазделительБлокаПараметровКомментария;
Перем РазделительБлокаКодыОтветовКомментария;

Перем КартаМодуля Экспорт;

// Инициализация объекта класса
//
// Параметры:
//   ПутьКМодулю - Строка - Местоположение исследуемого модуля
//
Процедура ПриСозданииОбъекта(ПутьКМодулю)

	// чтение содержимого модуля
	Файл = Новый ТекстовыйДокумент;
	Файл.Прочитать(ПутьКМодулю, КодировкаТекста.UTF8);

	ТекстМодуля = СокрЛП(Файл.ПолучитьТекст());

	// инициализация регулярок для парсинга
	рв_НачалоВызова = "[Пп][Рр][Оо][Цц][Ее][Дд][Уу][Рр][Аа]|[Фф][Уу][Нн][Кк][Цц][Ии][Яя]";
	рв_КонецВызова = "[Кк][Оо][Нн][Ее][Цц][Пп][Рр][Оо][Цц][Ее][Дд][Уу][Рр][Ыы]|[Кк][Оо][Нн][Ее][Цц][Фф][Уу][Нн][Кк][Цц][Ии][Ии]";

	рв_ПоискБлокиВызовов = "(?=(" + рв_НачалоВызова + "|^\/\/))(.|\n)*?(?<=" + рв_КонецВызова + ")";
	рв_РазделительБлокаВызова = "(?=^\/+[\t\s]*$)*(?=" + рв_НачалоВызова + ")";
	рв_РазделительБлокаКомментария = "^\/+[\t\s]*$";
	рв_ОчисткаБлокаКомментария = "\/\/(\t|\s)*";
	рв_РазделительБлокаПараметровКомментария = "(?=^[а-яА-Яa-zA-Z]*.-.[а-яА-Яa-zA-Z ]*.-..*)";
	рв_РазделительБлокаКодыОтветовКомментария = "(?=^[0-9]*.-.[а-яА-Яa-zA-Z]*.*)";

	ПоискБлокиВызовов = Новый РегулярноеВыражение(рв_ПоискБлокиВызовов);
	ПоискИмяВызова = Новый РегулярноеВыражение("(?<=" + рв_НачалоВызова + ").*(?=\()");
	ПоискТипВызова = Новый РегулярноеВыражение("^(" + рв_НачалоВызова + ")");
	РазделительБлокаВызова = Новый РегулярноеВыражение(рв_РазделительБлокаВызова);
	РазделительБлокаКомментария = Новый РегулярноеВыражение(рв_РазделительБлокаКомментария);
	ОчисткаБлокаКомментария = Новый РегулярноеВыражение(рв_ОчисткаБлокаКомментария);
	РазделительБлокаПараметровКомментария = Новый РегулярноеВыражение(рв_РазделительБлокаПараметровКомментария);
	РазделительБлокаКодыОтветовКомментария = Новый РегулярноеВыражение(рв_РазделительБлокаКодыОтветовКомментария);

	// инициализация внутренних структур
	КартаМодуля = Новый Соответствие();

КонецПроцедуры

Процедура Прочитать() Экспорт
	
	СовпаденияБлокиВызовов = ПоискБлокиВызовов.НайтиСовпадения(ТекстМодуля);
	
	Для Каждого Совпадение Из СовпаденияБлокиВызовов Цикл
		
		СодержимоеКомментария = "";
		КодВызова = "";

		СодержимоеВызова = СокрЛП(Совпадение.Значение);
		
		ИмяВызова = ПолучитьИмяВызова(СодержимоеВызова);
		ТипВызова = ПолучитьТипВызова(СодержимоеВызова);

		// разделим вызов на блоки - комментарий и код
		БлокиВызова = РазделительБлокаВызова.Разделить(СодержимоеВызова);

		Для Каждого ТекстБлокаВызова Из БлокиВызова Цикл
			
			СодержимоеБлокаВызова = СокрЛП(ТекстБлокаВызова);

			Если Лев(СодержимоеБлокаВызова, 2) = "//" Тогда
				СодержимоеКомментария = СодержимоеБлокаВызова;
			Иначе
				КодВызова = СодержимоеБлокаВызова;
			КонецЕсли;

		КонецЦикла;
		
		// распарсим комментарий, ожидаем стандарт ИТС с поправками для сервисов
		СоставКомментария = ПолучитьСоставКомментария(СодержимоеКомментария);

		// добавим в карту вызовов
		ОписаниеВызова = НовоеОписаниеВызова();

		ОписаниеВызова.Имя = ИмяВызова;
		ОписаниеВызова.Тип = ТипВызова;
		ОписаниеВызова.Код = КодВызова;
		ОписаниеВызова.Описание = СоставКомментария.Описание;
		ОписаниеВызова.ВходящиеПараметры = СоставКомментария.ВходящиеПараметры;
		ОписаниеВызова.ВозвращаемоеЗначение = СоставКомментария.ВозвращаемоеЗначение;
		ОписаниеВызова.КодыОтветов = СоставКомментария.КодыОтветов;
		ОписаниеВызова.ВариантыВызова = СоставКомментария.ВариантыВызова;
		ОписаниеВызова.ВариантыОтвета = СоставКомментария.ВариантыОтвета;
		
		КартаМодуля.Вставить(ВРег(ИмяВызова), ОписаниеВызова);

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьИмяВызова(СодержимоеВызова)
	
	Результат = "";

	Совпадения = ПоискИмяВызова.НайтиСовпадения(СодержимоеВызова);
	
	Если Совпадения.Количество() = 0 Тогда
		Сообщить("Не найдено имя вызова в блоке!");
	КонецЕсли;

	Результат = СокрЛП(Совпадения[0].Значение);

	Возврат Результат;

КонецФункции

Функция ПолучитьТипВызова(СодержимоеВызова)
	
	Результат = "";

	Совпадения = ПоискТипВызова.НайтиСовпадения(СодержимоеВызова);

	Если Совпадения.Количество() = 0 Тогда
		Сообщить("Не найден тип вызова в блоке!");
	КонецЕсли;

	Результат = СокрЛП(Совпадения[0].Значение);

	Возврат Результат;

КонецФункции

Функция ПолучитьСоставКомментария(СодержимоеКомментария)

	Результат = Новый Структура;

	Результат.Вставить("Описание", Неопределено);
	Результат.Вставить("ВходящиеПараметры", Неопределено);
	Результат.Вставить("ВариантыВызова", Неопределено);
	Результат.Вставить("ВариантыОтвета", Неопределено);
	Результат.Вставить("ВозвращаемоеЗначение", Неопределено);
	Результат.Вставить("КодыОтветов", Неопределено);

	Результат.Вставить("Пример", Неопределено);

	Если СодержимоеКомментария <> "" Тогда
			
		БлокиКомментария = РазделительБлокаКомментария.Разделить(СодержимоеКомментария);

		Для Каждого ТекстБлокаКомментария Из БлокиКомментария Цикл

			СодержимоеБлока = ОчиститьТекстБлокаКомментария(ТекстБлокаКомментария);
			
			Если СодержимоеБлока = "" Тогда
				Продолжить;
			КонецЕсли;

			Если СтрНачинаетсяС(СодержимоеБлока, "Параметры:") Тогда
				Результат.ВходящиеПараметры = ПолучитьВходящиеПараметрыИзКомментария(СодержимоеБлока);
			ИначеЕсли СтрНачинаетсяС(СодержимоеБлока, "Варианты вызова:") Тогда
				Результат.ВариантыВызова = ПолучитьВариантыВызоваИзКомментария(СодержимоеБлока);
			ИначеЕсли СтрНачинаетсяС(СодержимоеБлока, "Варианты ответа:") Тогда
				Результат.ВариантыОтвета = ПолучитьВариантыОтветаИзКомментария(СодержимоеБлока);
			ИначеЕсли СтрНачинаетсяС(СодержимоеБлока, "Возвращаемое значение:") Тогда
				Результат.ВозвращаемоеЗначение = СодержимоеБлока;
			ИначеЕсли СтрНачинаетсяС(СодержимоеБлока, "Коды ответов:") Тогда
				Результат.КодыОтветов = ПолучитьКодыОтветовИзКомментария(СодержимоеБлока);
			ИначеЕсли СтрНачинаетсяС(СодержимоеБлока, "Пример:") Тогда
				Результат.Пример = СодержимоеБлока;
			Иначе
				Результат.Описание = СодержимоеБлока;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ОчиститьТекстБлокаКомментария(ТекстБлокаКомментария)

	Результат = СокрЛП(ТекстБлокаКомментария);

	Результат = ОчисткаБлокаКомментария.Заменить(Результат, "");

	Возврат Результат;

КонецФункции

Функция ПолучитьВходящиеПараметрыИзКомментария(Текст)
	
	Результат = Новый Массив;

	ТекстПараметры = СтрЗаменить(Текст, "Параметры:", "");
	
	ОписанияПараметров = РазделительБлокаПараметровКомментария.Разделить(ТекстПараметры);
	
	Для Каждого ТекстОписанияПараметра Из ОписанияПараметров Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекстОписанияПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиОписанияПараметра = СтрРазделить(ТекстОписанияПараметра, Символы.ПС, Ложь);
		
		// первая строка всегда должна быть по стандарту
		ЗаголовокПараметра = СтрокиОписанияПараметра[0];
		
		// ожидаем строку вида "Имя - Тип - Описание"
		СоставЗаголовкаПараметра = СтрРазделить(ЗаголовокПараметра, "-", Ложь);

		Если СоставЗаголовкаПараметра.Количество() <> 3 Тогда
			Сообщить("Некорректное описание параметра в строке: " + Символы.ПС + ЗаголовокПараметра);
		КонецЕсли;

		ОписаниеВходящегоПараметра = НовоеОписаниеПараметра();

		ОписаниеВходящегоПараметра.Имя = СокрЛП(СоставЗаголовкаПараметра[0]);
		ОписаниеВходящегоПараметра.Тип = СокрЛП(СоставЗаголовкаПараметра[1]);
		ОписаниеВходящегоПараметра.Описание = СокрЛП(СоставЗаголовкаПараметра[2]);
		ОписаниеВходящегоПараметра.Обязательный = СтрНайти(ОписаниеВходящегоПараметра.Описание, "обязательный") > 0;

		// проверим доп. данные
		КоличествоСтрок = СтрокиОписанияПараметра.Количество();
		
		Если КоличествоСтрок > 1 Тогда
			ЗаполнитьОписаниеПараметра(ОписаниеВходящегоПараметра, СтрокиОписанияПараметра, КоличествоСтрок);
		КонецЕсли;

		Результат.Добавить(ОписаниеВходящегоПараметра);

	КонецЦикла;

	Возврат ?(Результат.Количество() = 0, Неопределено, Результат);

КонецФункции

Функция ПолучитьВариантыВызоваИзКомментария(Текст)

	Результат = Новый Массив;

	ТекстПараметры = СтрЗаменить(Текст, "Варианты вызова:", "");

	ОписанияВариантовВызова = СтрРазделить(ТекстПараметры, Символы.ПС);

	Для Каждого ТекстВариантовВызова Из ОписанияВариантовВызова Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекстВариантовВызова) Тогда
			Продолжить;
		КонецЕсли;

		Результат.Добавить(СокрЛП(ТекстВариантовВызова));

	КонецЦикла;

	Возврат ?(Результат.Количество() = 0, Неопределено, Результат);

КонецФункции

Функция ПолучитьВариантыОтветаИзКомментария(Текст)

	Результат = Новый Массив;

	ТекстПараметры = СтрЗаменить(Текст, "Варианты ответа:", "");

	ОписанияВариантовОтвета = СтрРазделить(ТекстПараметры, Символы.ПС);

	Для Каждого ТекстВариантовОтвета Из ОписанияВариантовОтвета Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекстВариантовОтвета) Тогда
			Продолжить;
		КонецЕсли;

		Результат.Добавить(СокрЛП(ТекстВариантовОтвета));

	КонецЦикла;

	Возврат ?(Результат.Количество() = 0, Неопределено, Результат);

КонецФункции

Функция ПолучитьКодыОтветовИзКомментария(Текст)
	
	Результат = Новый Массив;

	ТекстКодыОтветов = СтрЗаменить(Текст, "Коды ответов:", "");
	
	ОписанияКодовОтветов = РазделительБлокаКодыОтветовКомментария.Разделить(ТекстКодыОтветов);
	
	Для Каждого ТекстКодовОтветов Из ОписанияКодовОтветов Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекстКодовОтветов) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиКодовОтветов = СтрРазделить(ТекстКодовОтветов, Символы.ПС, Ложь);
		
		// первая строка может быть по шаблону "Код - Описание" или "Код - Возвращаемое значение - Описание"
		ЗаголовокКодаОтвета = СтрокиКодовОтветов[0];
		
		// ожидаем строку вида "Код - Описание" или "Код - Возвращаемое значение - Описание"
		СоставКодаОтвета = СтрРазделить(ЗаголовокКодаОтвета, "-", Ложь);

		Если СоставКодаОтвета.Количество() <> 2 И СоставКодаОтвета.Количество() <> 3 Тогда
			Сообщить("Некорректное описание кода ответа в строке: " + Символы.ПС + ЗаголовокКодаОтвета);
		КонецЕсли;

		ОписаниеКодаОтвета = НовоеОписаниеКодаОтвета();

		ОписаниеКодаОтвета.Код = СокрЛП(СоставКодаОтвета[0]);
		
		Если СоставКодаОтвета.Количество() = 2 Тогда
			ОписаниеКодаОтвета.Описание = СокрЛП(СоставКодаОтвета[1]);
		ИначеЕсли СоставКодаОтвета.Количество() = 3 Тогда
			ОписаниеКодаОтвета.Тип = СокрЛП(СоставКодаОтвета[1]);
			ОписаниеКодаОтвета.Описание = СокрЛП(СоставКодаОтвета[2]);
		КонецЕсли;

		// проверим доп. данные
		КоличествоСтрок = СтрокиКодовОтветов.Количество();
		
		Если КоличествоСтрок > 1 Тогда

			Для НомерСтроки = 1 По (КоличествоСтрок - 1) Цикл
				ЗаполнитьОписаниеПараметра(ОписаниеКодаОтвета, СтрокиКодовОтветов, КоличествоСтрок);
			КонецЦикла;
			
		КонецЕсли;

		Результат.Добавить(ОписаниеКодаОтвета);

	КонецЦикла;

	Возврат ?(Результат.Количество() = 0, Неопределено, Результат);

КонецФункции

Процедура ЗаполнитьОписаниеПараметра(ОписаниеПараметра, СтрокиОписанияПараметра, КоличествоСтрок)
	
	ИерархияПараметров = Новый Соответствие();
	ТекущийУровень = 1;
	ИерархияПараметров.Вставить(ТекущийУровень, ОписаниеПараметра);

	ОписаниеСоставногоТипа = Неопределено;
	ПредыдущийПараметр = ОписаниеПараметра;

	Для НомерСтроки = 1 По (КоличествоСтрок - 1) Цикл
		
		ТекущаяСтрока = СтрокиОписанияПараметра[НомерСтроки];

		УровеньПараметра = СтрЧислоВхождений(ТекущаяСтрока, "*");

		Если УровеньПараметра > ТекущийУровень И ОписаниеСоставногоТипа <> Неопределено Тогда
			ТекущийУровень = УровеньПараметра;
			ИерархияПараметров.Вставить(ТекущийУровень, ОписаниеСоставногоТипа);
		ИначеЕсли УровеньПараметра < ТекущийУровень И УровеньПараметра > 0 Тогда
			ТекущийУровень = УровеньПараметра;
		КонецЕсли;

		Если Лев(ТекущаяСтрока, 1) = "*" Тогда

			// строка вида "* Имя - Тип - Описание"
			СоставЗаголовкаСоставногоТипа = СтрРазделить(СтрЗаменить(ТекущаяСтрока, "*", ""), "-", Ложь);

			Если СоставЗаголовкаСоставногоТипа.Количество() <> 3 Тогда
				Сообщить("Некорректное описание параметра в строке: " + Символы.ПС + ТекущаяСтрока);
			КонецЕсли;

			ОписаниеСоставногоТипа = НовоеОписаниеПараметра();

			ОписаниеСоставногоТипа.Имя = СокрЛП(СоставЗаголовкаСоставногоТипа[0]);
			ОписаниеСоставногоТипа.Тип = СокрЛП(СоставЗаголовкаСоставногоТипа[1]);
			ОписаниеСоставногоТипа.Описание = СокрЛП(СоставЗаголовкаСоставногоТипа[2]);

			Если ИерархияПараметров[ТекущийУровень].СоставнойТип = Неопределено Тогда
				ИерархияПараметров[ТекущийУровень].СоставнойТип = Новый Массив();
			КонецЕсли;

			ИерархияПараметров[ТекущийУровень].СоставнойТип.Добавить(ОписаниеСоставногоТипа);

			ПредыдущийПараметр = ОписаниеСоставногоТипа;
			
		ИначеЕсли Лев(ТекущаяСтрока, 1) = "~" Тогда

			// строка вида "~ Значение - Описание"
			СоставЗаголовкаВозможногоЗначения = СтрРазделить(СтрЗаменить(ТекущаяСтрока, "~", ""), "-", Ложь);
			
			ОписаниеВозможногоЗначения = Новый Структура("Значение, Описание");

			ОписаниеВозможногоЗначения.Значение = СокрЛП(СоставЗаголовкаВозможногоЗначения[0]);
			ОписаниеВозможногоЗначения.Описание = СокрЛП(СоставЗаголовкаВозможногоЗначения[1]);

			Если ПредыдущийПараметр.ВозможныеЗначения = Неопределено Тогда
				ПредыдущийПараметр.ВозможныеЗначения = Новый Массив();
			КонецЕсли;

			ПредыдущийПараметр.ВозможныеЗначения.Добавить(ОписаниеВозможногоЗначения);

		Иначе
			ПредыдущийПараметр.Описание = ИерархияПараметров[ТекущийУровень].Описание + Символы.ПС + ТекущаяСтрока;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция НовоеОписаниеВызова()
	Возврат Новый Структура("Имя, Тип, Код, Описание, ВходящиеПараметры, ВозвращаемоеЗначение, КодыОтветов, ВариантыВызова, ВариантыОтвета");
КонецФункции

Функция НовоеОписаниеПараметра()
	Возврат Новый Структура("Имя, Тип, Описание, ВозможныеЗначения, Обязательный, СоставнойТип");
КонецФункции

Функция НовоеОписаниеКодаОтвета()
	Возврат Новый Структура("Код, Тип, Описание, ВозможныеЗначения, СоставнойТип");
КонецФункции